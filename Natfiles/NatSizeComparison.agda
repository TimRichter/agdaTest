module Natfiles.NatSizeComparison where

open import Natfiles.NatDataDef

open import PropositionalEquality

open import Bool

open import Natfiles.NatSizelessFunctions

{- Gleichheit in ‚Ñï ist entscheidbar: Die Funktion liefert f√ºr jedes Paar n,m eine Entscheidung und Beweis bzw. eine Widerlegung von n == m -}
decEq‚Ñï : (n m : ‚Ñï) ‚Üí Dec (n == m)
decEq‚Ñï Zero Zero = Yes Refl
decEq‚Ñï (Suc n) Zero = No f where
  f : {n : ‚Ñï} -> ((Suc n) == Zero) ‚Üí ‚ä•
  f ()
decEq‚Ñï Zero (Suc m) = No f where
  f : {m : ‚Ñï} -> (Zero == (Suc m)) ‚Üí ‚ä•
  f ()
decEq‚Ñï (Suc n) (Suc m) with (decEq‚Ñï n m)
decEq‚Ñï (Suc n) (Suc m) | (Yes nEqm)  = Yes (app Suc nEqm)
decEq‚Ñï (Suc n) (Suc m) | (No  ¬¨nEqm) = No (¬¨nEqm ‚àò f) where
               f : (Suc n == Suc m) ‚Üí (n == m)
               f snEqsm = (app pred snEqsm)

{- Die Gr√∂√üenrelationen auf ‚Ñï -}

_==‚Ñï_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ùîπ 
Zero ==‚Ñï Zero = True
(Suc n) ==‚Ñï Zero = False
Zero ==‚Ñï (Suc m) = False
(Suc n) ==‚Ñï (Suc m) = n ==‚Ñï m

leibnizid==‚Ñï : (A : ‚Ñï ‚Üí Set) ‚Üí (n m : ‚Ñï) ‚Üí ((n ==‚Ñï m) == True) ‚Üí A n ‚Üí A m
leibnizid==‚Ñï _ Zero Zero _ q = q
leibnizid==‚Ñï _ Zero (Suc m) () _
leibnizid==‚Ñï _ (Suc n) Zero () _
leibnizid==‚Ñï A (Suc n) (Suc m) p q = leibnizid==‚Ñï B n m p q where
  B : ‚Ñï ‚Üí Set
  B n = A (Suc n)

_‚â§_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ùîπ 
Zero ‚â§ m = True
(Suc n) ‚â§ Zero = False
(Suc n) ‚â§ (Suc m) = n ‚â§ m

==‚Ñïto‚â§ : {n m : ‚Ñï} ‚Üí ((n ==‚Ñï m) == True) ‚Üí ((n ‚â§ m) == True)
==‚Ñïto‚â§ {Zero} {_} _ = Refl
==‚Ñïto‚â§ {Suc n} {Zero} ()
==‚Ñïto‚â§ {Suc n} {Suc m} p = ==‚Ñïto‚â§ {n} {m} p

{- Ungleichheit in ‚Ñï ist entscheidbar: Die Funktion liefert f√ºr jedes Paar n,m eine Entscheidung und Beweis bzw. eine Widerlegung von n ‚â§ m == True -}
dec[n‚â§m] : (n m : ‚Ñï) ‚Üí Dec ((n ‚â§ m) == True)
dec[n‚â§m] Zero _ = Yes Refl
dec[n‚â§m] (Suc n) Zero = No f where
  f : (False == True) ‚Üí ‚ä•
  f ()
dec[n‚â§m] (Suc n) (Suc m) = dec[n‚â§m] n m

refl‚â§ : (n : ‚Ñï) ‚Üí ((n ‚â§ n) == True)
refl‚â§ Zero = Refl
refl‚â§ (Suc n) = refl‚â§ n

antisym‚â§ : (n m : ‚Ñï) ‚Üí ((n ‚â§ m) == True) ‚Üí ((m ‚â§ n) == True) ‚Üí (n == m)
antisym‚â§ Zero Zero _ _ = Refl
antisym‚â§ (Suc n) Zero () _ -- Beim Unirechner funzt antisym‚â§ (Suc n) Zero ()
antisym‚â§ Zero (Suc m) _ ()
antisym‚â§ (Suc n) (Suc m) p q = app Suc (antisym‚â§ n m p q)

trans‚â§ : {n m l : ‚Ñï} ‚Üí ((n ‚â§ m) == True) ‚Üí ((m ‚â§ l) == True) ‚Üí ((n ‚â§ l) == True)
trans‚â§ {Zero} {_} {_} _ _ = Refl
trans‚â§ {Suc n} {Zero} {_} () _ -- s.o.
trans‚â§ {Suc n} {Suc m} {Zero} _ ()
trans‚â§ {Suc n} {Suc m} {Suc l} p q = trans‚â§ {n} {m} {l} p q

dicho‚â§ : (n m : ‚Ñï) ‚Üí (((n ‚â§ m) ‚à® (m ‚â§ n)) == True)
dicho‚â§ Zero _ = Refl
dicho‚â§ (Suc n) Zero = Refl
dicho‚â§ (Suc n) (Suc m) = dicho‚â§ n m

_<_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ùîπ
n < m = (Suc n) ‚â§ m

<to‚â§ : (n m : ‚Ñï) ‚Üí ((n < m) == True) ‚Üí ((n ‚â§ m) == True)
<to‚â§ Zero _ _ = Refl
<to‚â§ (Suc n) Zero ()
<to‚â§ (Suc n) (Suc m) p = <to‚â§ n m p

tricho< : (n m : ‚Ñï) ‚Üí ((n < m) == True) +Set (((n ==‚Ñï m) == True) +Set ((m < n) == True))
tricho< Zero Zero = Inr (Inl Refl)
tricho< Zero (Suc m) = Inl Refl
tricho< (Suc n) Zero = Inr (Inr Refl)
tricho< (Suc n) (Suc m) = tricho< n m

_‚â•_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ùîπ
n ‚â• m = m ‚â§ n

‚â§‚â•to==‚Ñï : (n m : ‚Ñï) ‚Üí ((n ‚â§ m) == True) ‚Üí ((n ‚â• m) == True) ‚Üí ((n ==‚Ñï m) == True)
‚â§‚â•to==‚Ñï Zero Zero _ _ = Refl
‚â§‚â•to==‚Ñï Zero (Suc m) _ ()
‚â§‚â•to==‚Ñï (Suc n) Zero () _
‚â§‚â•to==‚Ñï (Suc n) (Suc m) p q = ‚â§‚â•to==‚Ñï n m p q

_>_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ùîπ
n > m = m < n
